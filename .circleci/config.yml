version: 2
jobs:
  build:
    docker:
      - image: circleci/golang:latest
      - image: argoproj/argocd:latest
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install SDK
          command: |
            # Add the Cloud SDK distribution URI as a package source:
            echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list

            # Make sure you have apt-transport-https installed:
            sudo apt-get install apt-transport-https ca-certificates

            # Import the Google Cloud public key:
            curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -

            # Update and install the Cloud SDK, kubectl
            sudo apt-get update && sudo apt-get install google-cloud-sdk kubectl
      - run: 
          name: Build and push image
          command: |
            cd ~/project/hello-app/

            # Store service account:
            echo $GCLOUD_SERVICE_KEY > gcloud-service-key.json

            # Initialize gcloud CLI:
            gcloud auth activate-service-account --key-file=gcloud-service-key.json
            gcloud --quiet config set project $GOOGLE_PROJECT_ID
            gcloud --quiet config set compute/zone $GOOGLE_COMPUTE_ZONE

            # Configure Docker to authenticate to GCR:
            gcloud auth configure-docker

            docker build -t gcr.io/${GOOGLE_PROJECT_ID}/hello-app:${CIRCLE_SHA1} .

            # Upload image to GCR
            docker push gcr.io/${GOOGLE_PROJECT_ID}/hello-app:${CIRCLE_SHA1}
      - run:
          name: Deploy app
          command: |
            cd ~/project/hello-app/
            # Generate kubeconfig entry
            gcloud container clusters get-credentials hello-cluster --zone $GOOGLE_COMPUTE_ZONE

            ## Deploy app. Only run once.
            # kubectl create deployment hello-web --image=gcr.io/${GOOGLE_PROJECT_ID}/hello-app:${CIRCLE_SHA1}
            ## Expose port          
            # kubectl expose deployment hello-web --type=LoadBalancer --port 80 --target-port 8080

            # Apply rolling update
            kubectl set image deployment/hello-web hello-app=gcr.io/${GOOGLE_PROJECT_ID}/hello-app:${CIRCLE_SHA1}
      - run:
          name: Get service IP
          command: kubectl get service
      - run:
          name: Argo deploy
          command: |
            cd ~/project/hello-app/
            # Install Argo CD
            kubectl create namespace argocd
            kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

            # Grant permission to create new cluster rules
            kubectl create clusterrolebinding ${PREFIX}-cluster-admin-binding --clusterrole=cluster-admin --user=${EMAIL}

  deploy-production:
    docker:
      - image: circleci/golang:latest
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Log in to Docker Hub
          command: echo "$DOCKER_PASS" | docker login -u $DOCKER_USER --password-stdin
      - run:
          name: Pull Docker image from Docker Hub
          command: docker pull olukotunts/app:$CIRCLE_SHA1
      - run:
          name: Install Heroku CLI
          command: curl https://cli-assets.heroku.com/install.sh | sh
      - run:
          name: Log in to Heroku Container Registry
          command: heroku container:login
      - run:
          name: Tag Docker image
          command: docker tag olukotunts/app:$CIRCLE_SHA1 registry.heroku.com/name-button/web
      - run:
          name: Push Docker image to Heroku
          command: docker push registry.heroku.com/name-button/web
      - run:
          name: Deploy Docker image to Heroku
          command: heroku container:release --app name-button web

workflows:
  version: 2
  build_test_and_deploy:
    jobs:
      - build
      - promote-to-production:
          type: approval  
          requires:
            - build
      - deploy-production:
          requires:
            - promote-to-production
